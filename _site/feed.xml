<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pursue</title>
    <description></description>
    <link>https://github.com/kkkkkxiaofei/</link>
    <atom:link href="https://github.com/kkkkkxiaofei/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 30 May 2015 11:19:10 +0800</pubDate>
    <lastBuildDate>Sat, 30 May 2015 11:19:10 +0800</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>买菜大妈都能听得懂的技术</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;来源&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;首先声明，真的不是标题党。昨天毛P分享的号称买菜大妈都能听得懂的技术Session很不错，大家都纷纷点赞，全票通过称为当之无愧的Share Man，喝酸奶那是必须的（可不可以换养乐多啊，哈哈）。不夸张的说，不光UX和QA听得懂了，回去给我女朋讲，连她都可以在听得过程中指出‘画师是不是应该是你们开发人员，而画布才是view呢？’，瞬间让我无言以对。所以，早上起来就觉得应该重新排版下，扩散到朋友圈。好啦，Session开始啦，前排板凳花生伺候。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.001.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.002.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.003.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.004.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.005.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.006.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.007.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.008.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.009.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.010.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.011.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.012.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.013.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.014.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.015.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.016.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.017.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.018.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.019.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.020.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.021.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.022.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.023.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.024.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.025.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.026.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.027.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.028.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.029.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.030.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.031.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.032.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.033.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.034.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.035.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.036.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.037.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.038.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.039.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.040.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.041.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.042.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.043.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.044.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.045.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.046.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/../img/买菜大妈都能听懂的技术session/买菜大妈都能听懂的技术session.047.jpg&quot; alt=&quot;asd&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;此文真的很赞，绝对的把妹神文，别(求)你妹(大爷)的看完就闪人了(赏个脸)，求转发求扩散～&lt;/code&gt; &lt;/p&gt;

</description>
        <pubDate>Sat, 30 May 2015 09:34:00 +0800</pubDate>
        <link>https://github.com/kkkkkxiaofei/jekyll/update/2015/05/30/mao-chao-session.html</link>
        <guid isPermaLink="true">https://github.com/kkkkkxiaofei/jekyll/update/2015/05/30/mao-chao-session.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Markdown入门指南</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;导语&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被标记语言吓到，它的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的 HTML 标记语言来说，Markdown可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;markdown&quot;&gt;1.初识Markdown&lt;/h3&gt;

&lt;p&gt;在刚才的导语里提到，Markdown是一种用来写作的轻量级「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 Word 或 Pages 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式。例如此文从内容到格式，甚至插图，键盘就可以通通搞定了。&lt;/p&gt;

&lt;p&gt;目前来看，支持Markdown语法的编辑器有很多，包括很多网站（例如简书）也支持了Markdown的文字录入。Markdown从写作到完成，导出格式随心所欲，你可以导出HTML格式的文件用来网站发布，也可以十分方便的导出 PDF 格式，这种格式写出的简历更能得到 HR 的好感。&lt;/p&gt;

&lt;p&gt;甚至可以利用CloudApp这种云服务工具直接上传至网页用来分享你的文章，全球最大的轻博客平台Tumblr，也支持 Mou 这类 Markdown工具的直接上传。&lt;/p&gt;

&lt;h3 id=&quot;markdown-&quot;&gt;使用 Markdown 的优点&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;1. 专注你的文字内容而不是排版样式，安心写作。
2. 轻松的导出 HTML、PDF 和本身的 .md 文件。
3. 纯文本内容，兼容所有的文本编辑器与字处理软件。
4. 随时修改你的文章版本，不必像字处理软件生成若干文件版本导致混乱。
5. 可读、直观、学习成本低。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;markdown--1&quot;&gt;使用 Markdown 的误区&lt;/h3&gt;

&lt;p&gt;Markdown 旨在简洁、高效，也由于Markdown的易读易写，人们用不同的编程语言实现了多个版本的解析器和生成器，这就导致了目前不同的 Markdown 工具集成了不同的功能（基础功能大致相同），例如流程图与时序图，复杂表格与复杂公式的呈现，虽然功能的丰富并没有什么本质的缺点，但终归有些背离初衷，何况在编写的过程中很费神，不如使用专业的工具撰写来的更有效率.&lt;/p&gt;

&lt;p&gt;所以如果你需实现复杂功能，专业的图形界面工具会更加方便。当然，如果你对折腾这些不同客户端对Markdown的定制所带来高阶功能感到愉悦的话，那也是无可厚非的。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;我该用什么工具&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Mac上，我强烈建议你用Mou这款免费且十分好用的Markdown编辑器，它支持实时预览，既左边是你编辑 Markdown 语言，右边会实时的生成预览效果。不仅如此，Mou还有一些有趣的偏好设置（Preference），例如主题（Themes）与样式（CSS），它们可以配置出定制化的文本编辑效果与导出效果，如果你对自带的主题与样式不满意还可以到GitHub上搜索其它爱好者为Mou编写的更多主题样式，导入的方式可以在偏好设置的 Themes 或 CSS 选项中 选择 reload。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果你从事文字工作，我强烈建议你购买 Ulysses for Mac，这款软件入围了苹果 Mac App Store 的 The Best of 2013。它支持更多的写作格式、多文档的支持。Mou，iA writer 这些软件都是基于单文档的管理方式，而 Ulysses 支持 Folder、Filter 的管理，一个 Folder 里面可以创建多个 Sheet，Sheet 之间也可以进行 Combine 处理。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 Web端，我强烈推荐简书这款产品，上面有无数热爱文字的人在不停的创造，分享。在 Web 端使用 Markdown 没有比简书更舒服的地方了，同样支持左右两栏的实时预览，字体优雅，简洁。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;markdown--2&quot;&gt;2.Markdown 语法的简要规则&lt;/h3&gt;

&lt;h3 id=&quot;section-2&quot;&gt;&lt;code&gt;标题&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;标题是每篇文章都需要也是最常用的格式，在Markdown中，如果一段文字被定义为标题，只要在这段文字前加 &lt;code&gt;#&lt;/code&gt; 号即可。&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;一级标题&lt;/h1&gt;

&lt;h2 id=&quot;section-4&quot;&gt;二级标题&lt;/h2&gt;

&lt;h3 id=&quot;section-5&quot;&gt;三级标题&lt;/h3&gt;

&lt;p&gt;以此类推，总共六级标题，建议在井号后加一个空格，这是最标准的 Markdown 语法。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;&lt;code&gt;列表&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;熟悉 HTML 的同学肯定知道有序列表与无序列表的区别，在Markdown下，列表的显示只需要在文字前加上 &lt;code&gt;-&lt;/code&gt; 或 &lt;code&gt;*&lt;/code&gt; 即可变为无序列表，有序列表则直接在文字前加&lt;code&gt;1. 2. 3.&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;&lt;code&gt;引用&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;如果你需要引用一小段别处的句子，那么就要用引用的格式。只需要在文本前加入尖括号（大于号）即可。&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;&lt;code&gt;图片与链接&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;插入链接与插入图片的语法很像，区别在一个&lt;code&gt;!&lt;/code&gt;号&lt;/p&gt;

&lt;p&gt;图片为：&lt;code&gt;![](){ImgCap}{/ImgCap}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;链接为：&lt;code&gt;[]()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;插入图片的地址需要图床，这里推荐围脖图床修复计划 与 CloudApp 的服务，生成URL地址即可。&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;&lt;code&gt;粗体与斜体&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Markdown 的粗体和斜体也非常简单，用两个&lt;code&gt;*&lt;/code&gt; 包含一段文本就是粗体的语法，用一个 &lt;code&gt;*&lt;/code&gt; 包含一段文本就是斜体的语法。&lt;/p&gt;

&lt;p&gt;例如： &lt;em&gt;这里是斜体&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-10&quot;&gt;&lt;code&gt;分割线&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;分割线的语法只需要三个&lt;code&gt;*&lt;/code&gt;号，例如：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;华丽丽的分割线&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;markdown--3&quot;&gt;Markdown 官方文档&lt;/h3&gt;

&lt;p&gt;这里可以看到官方的 Markdown 语法规则文档，当然，后文我也会用自己的方式阐述这些语法的具体用法。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#http://wowubuntu.com/markdown/#editor&quot;&gt;Markdown中文版语法说明&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#http://dillinger.io/&quot;&gt;Markdown在线编辑器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#http://www.tuicool.com/articles/UjMJzym&quot;&gt;Sublime编辑Markdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;注：本文章转载为简书&lt;/code&gt;&lt;a href=&quot;#http://www.jianshu.com/p/1e402922ee32/&quot;&gt;原文请戳&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 27 May 2015 22:39:00 +0800</pubDate>
        <link>https://github.com/kkkkkxiaofei/jekyll/update/2015/05/27/markdown.html</link>
        <guid isPermaLink="true">https://github.com/kkkkkxiaofei/jekyll/update/2015/05/27/markdown.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Github Page构建静态博客</title>
        <description>&lt;h3 id=&quot;github-page&quot;&gt;Github Page&lt;/h3&gt;
&lt;p&gt;当你需要构建一个webapp项目时，为了更好的管理项目，Yeoman是一个不错的选择。有一下工具你可能需要提前安装：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;yo&lt;/code&gt; - &lt;code&gt;Yeoman&lt;/code&gt;用来自动初始化项目的工具.—-create a new web app&lt;/li&gt;
  &lt;li&gt;你还需要一个包管理器，例如&lt;code&gt;bower&lt;/code&gt;和&lt;code&gt;npm&lt;/code&gt;.—-handle dependencies &lt;/li&gt;
  &lt;li&gt;当然，我们还需要build项目，如&lt;code&gt;Grunt&lt;/code&gt;和&lt;code&gt;Gulp&lt;/code&gt;.—-preview,test and buid&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;yo&quot;&gt;安装yo&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g yo bower grunt-cli gulp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g yo bower grunt-cli gulp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;为了生成web app，我们还需要一个web generator&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g generator-webapp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这个generator将会包括&lt;code&gt;HTML5&lt;/code&gt; , &lt;code&gt;jQuery&lt;/code&gt;, &lt;code&gt;Modernizr&lt;/code&gt;, and &lt;code&gt;Bootstrap&lt;/code&gt;等重要依赖，同时它将使用&lt;code&gt;Grunt&lt;/code&gt;来build项目. &lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;接下来就会让我们新初始化一个项目吧&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir my-yo-project
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;my-yo-project
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yo webapp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这样你一个新的web项目就建立成功了。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;启动项目&lt;/h3&gt;
&lt;p&gt;由于build时用到了Grunt，所以利用&lt;code&gt;Grunt&lt;/code&gt;可以启动项目，若不加任何参数则默认会执行项目所有task，包括测试。若想启动项目，则&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;Grunt serve&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 27 May 2015 22:29:00 +0800</pubDate>
        <link>https://github.com/kkkkkxiaofei/jekyll/update/2015/05/27/github-page.html</link>
        <guid isPermaLink="true">https://github.com/kkkkkxiaofei/jekyll/update/2015/05/27/github-page.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>利用Html5的audio标签实现歌词滚动同步</title>
        <description>&lt;h4 id=&quot;yeoman&quot;&gt;Yeoman&lt;/h4&gt;
&lt;p&gt;当你需要构建一个webapp项目时，为了更好的管理项目，Yeoman是一个不错的选择。有一下工具你可能需要提前安装：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;yo&lt;/code&gt; - &lt;code&gt;Yeoman&lt;/code&gt;用来自动初始化项目的工具.—-create a new web app&lt;/li&gt;
  &lt;li&gt;你还需要一个包管理器，例如&lt;code&gt;bower&lt;/code&gt;和&lt;code&gt;npm&lt;/code&gt;.—-handle dependencies &lt;/li&gt;
  &lt;li&gt;当然，我们还需要build项目，如&lt;code&gt;Grunt&lt;/code&gt;和&lt;code&gt;Gulp&lt;/code&gt;.—-preview,test and buid&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;yo&quot;&gt;安装yo&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g yo bower grunt-cli gulp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g yo bower grunt-cli gulp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;为了生成web app，我们还需要一个web generator&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g generator-webapp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这个generator将会包括&lt;code&gt;HTML5&lt;/code&gt; , &lt;code&gt;jQuery&lt;/code&gt;, &lt;code&gt;Modernizr&lt;/code&gt;, and &lt;code&gt;Bootstrap&lt;/code&gt;等重要依赖，同时它将使用&lt;code&gt;Grunt&lt;/code&gt;来build项目. &lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;接下来就会让我们新初始化一个项目吧&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir my-yo-project
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;my-yo-project
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yo webapp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这样你一个新的web项目就建立成功了。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;启动项目&lt;/h4&gt;
&lt;p&gt;由于build时用到了Grunt，所以利用&lt;code&gt;Grunt&lt;/code&gt;可以启动项目，若不加任何参数则默认会执行项目所有task，包括测试。若想启动项目，则&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;Grunt serve&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Mon, 25 May 2015 23:49:00 +0800</pubDate>
        <link>https://github.com/kkkkkxiaofei/jekyll/update/2015/05/25/lyric.html</link>
        <guid isPermaLink="true">https://github.com/kkkkkxiaofei/jekyll/update/2015/05/25/lyric.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>jekyll构建Github Page项目</title>
        <description>&lt;h4 id=&quot;yeoman&quot;&gt;Yeoman&lt;/h4&gt;
&lt;p&gt;当你需要构建一个webapp项目时，为了更好的管理项目，Yeoman是一个不错的选择。有一下工具你可能需要提前安装：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;yo&lt;/code&gt; - &lt;code&gt;Yeoman&lt;/code&gt;用来自动初始化项目的工具.—-create a new web app&lt;/li&gt;
  &lt;li&gt;你还需要一个包管理器，例如&lt;code&gt;bower&lt;/code&gt;和&lt;code&gt;npm&lt;/code&gt;.—-handle dependencies &lt;/li&gt;
  &lt;li&gt;当然，我们还需要build项目，如&lt;code&gt;Grunt&lt;/code&gt;和&lt;code&gt;Gulp&lt;/code&gt;.—-preview,test and buid&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;yo&quot;&gt;安装yo&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g yo bower grunt-cli gulp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g yo bower grunt-cli gulp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;为了生成web app，我们还需要一个web generator&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g generator-webapp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这个generator将会包括&lt;code&gt;HTML5&lt;/code&gt; , &lt;code&gt;jQuery&lt;/code&gt;, &lt;code&gt;Modernizr&lt;/code&gt;, and &lt;code&gt;Bootstrap&lt;/code&gt;等重要依赖，同时它将使用&lt;code&gt;Grunt&lt;/code&gt;来build项目. &lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;接下来就会让我们新初始化一个项目吧&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir my-yo-project
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;my-yo-project
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yo webapp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这样你一个新的web项目就建立成功了。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;启动项目&lt;/h4&gt;
&lt;p&gt;由于build时用到了Grunt，所以利用&lt;code&gt;Grunt&lt;/code&gt;可以启动项目，若不加任何参数则默认会执行项目所有task，包括测试。若想启动项目，则&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;Grunt serve&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Mon, 25 May 2015 23:49:00 +0800</pubDate>
        <link>https://github.com/kkkkkxiaofei/jekyll/update/2015/05/25/jekyll.html</link>
        <guid isPermaLink="true">https://github.com/kkkkkxiaofei/jekyll/update/2015/05/25/jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>如何利用自动化工具构建一个完整的webapp项目</title>
        <description>&lt;h4 id=&quot;yeoman&quot;&gt;Yeoman&lt;/h4&gt;
&lt;p&gt;当你需要构建一个webapp项目时，为了更好的管理项目，Yeoman是一个不错的选择。有一下工具你可能需要提前安装：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;yo&lt;/code&gt; - &lt;code&gt;Yeoman&lt;/code&gt;用来自动初始化项目的工具.—-create a new web app&lt;/li&gt;
  &lt;li&gt;你还需要一个包管理器，例如&lt;code&gt;bower&lt;/code&gt;和&lt;code&gt;npm&lt;/code&gt;.—-handle dependencies &lt;/li&gt;
  &lt;li&gt;当然，我们还需要build项目，如&lt;code&gt;Grunt&lt;/code&gt;和&lt;code&gt;Gulp&lt;/code&gt;.—-preview,test and buid&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;yo&quot;&gt;安装yo&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g yo bower grunt-cli gulp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g yo bower grunt-cli gulp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;为了生成web app，我们还需要一个web generator&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g generator-webapp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这个generator将会包括&lt;code&gt;HTML5&lt;/code&gt; , &lt;code&gt;jQuery&lt;/code&gt;, &lt;code&gt;Modernizr&lt;/code&gt;, and &lt;code&gt;Bootstrap&lt;/code&gt;等重要依赖，同时它将使用&lt;code&gt;Grunt&lt;/code&gt;来build项目. &lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;接下来就会让我们新初始化一个项目吧&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir my-yo-project
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;my-yo-project
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yo webapp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这样你一个新的web项目就建立成功了。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;启动项目&lt;/h4&gt;
&lt;p&gt;由于build时用到了Grunt，所以利用&lt;code&gt;Grunt&lt;/code&gt;可以启动项目，若不加任何参数则默认会执行项目所有task，包括测试。若想启动项目，则&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;Grunt serve&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Fri, 15 May 2015 19:00:00 +0800</pubDate>
        <link>https://github.com/kkkkkxiaofei/jekyll/update/2015/05/15/yeoman.html</link>
        <guid isPermaLink="true">https://github.com/kkkkkxiaofei/jekyll/update/2015/05/15/yeoman.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>理解Javascript中的__proto__</title>
        <description>&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;__proto__可以看作是一个公开对象原型的内部访问器，大多数浏览器都实现了该属性。一个对象如何访问原型链上的方法，都是取决于__proto__的，因此暴露了这个属性则势必会为对象的安全性带来影响，所以MDN并不推荐随意改变一个对象的原型链，但是我们还是有必要了解它。&lt;/p&gt;

&lt;h3 id=&quot;syntax&quot;&gt;Syntax&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;circle&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;circle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__proto__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Object {}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Set the object prototype&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__proto__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Get the object prototype&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__proto__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Circle {name: &amp;#39;circle&amp;#39;, area: function}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上述例子中的shape对象首先由Object构造而来，因为起原型链指向Object.在改变其原型链指向circle后，则shape成为了Circle的实例,因为shape具有原生属性name和原型方法area。&lt;/p&gt;

&lt;p&gt;需要注意的是，如果将上述代码改为&lt;code&gt;shape.__proto__ = Circle.prototype&lt;/code&gt;的话，则shape.__prototype将输出Circle {area: function}.&lt;/p&gt;

&lt;p&gt;要理解__proto__,可以参考Object.creat()方法。&lt;/p&gt;

</description>
        <pubDate>Thu, 14 May 2015 23:31:00 +0800</pubDate>
        <link>https://github.com/kkkkkxiaofei/jekyll/update/2015/05/14/js-proto.html</link>
        <guid isPermaLink="true">https://github.com/kkkkkxiaofei/jekyll/update/2015/05/14/js-proto.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Javascript中Function.prototype.apply()的用法</title>
        <description>&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Function.prototype.apply()将会调用一个以this和数组形式的arguments为参数的方法，而call()方法则只是在第二个参数形式与之不同而已。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;fun.apply&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;thisArg, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;argsArray&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;fun.call&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;thisArg, arg1, arg2, arg3...&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;

&lt;p&gt;每当要为一个新的对象添加一个方法时，有时不得不为其重写一个方法。而如果利用apply的话，只需要写一次方法，然后在这个新的对象中继承它即可，十分方便。&lt;/p&gt;

&lt;p&gt;apply和call方法十分相似，仅仅只是参数不同而已，但证实因为这一点，我们在用apply时不必知道被调用的对象的具体参数，可以只传递arguments，如此一来，被调用的这个对象将负责handle传递的agrumets.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;h4 id=&quot;using-apply-to-chain-constructors&quot;&gt;1.Using apply to chain constructors&lt;/h4&gt;

&lt;p&gt;我们可以像Java那样，利用apply为一个对象创建构造链。在下面的例子中，我们将创建一个名为construct的全局方法，这个方法可以不必让你传递一个一个的参数，取而代之的则是传递一个参数数组。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;construct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oNew&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oNew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oNew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Example usage:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyConstructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nProp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nProp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nProp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;property&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nProp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nProp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyConstructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;property1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// &amp;#39;Hello world!&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myInstance&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyConstructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;#39;true&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;// &amp;#39;MyConstructor&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;using-apply-and-built-in-functions&quot;&gt;2.Using apply and built-in functions&lt;/h4&gt;

&lt;p&gt;利用apply调用javascript的内建方法是一种比较聪明的用法，例如下面的例子，利用apply调用系统max方法获取最大值。一般如果你要在一个数组中找到最大或最小值，那将不得不进行loop，即使利用系统自带的max函数，那也得传递有限个参数，十分不便。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* min/max number in an array */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* using Math.min/Math.max apply */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* This about equal to Math.max(numbers[0], ...)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;                                            or Math.max(5, 6, ...) */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;using-apply-in-monkey-patching&quot;&gt;3.Using apply in monkey-patching&lt;/h4&gt;

&lt;p&gt;apply还是一种很好的扩展内置对象方法的方式。如下面的例子，已有someobject.foo方法, 你可以像黑客那样在其原有的基础上修改它，从而破坏其封装性。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someobject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;someobject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;This is the originalfoo function.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;originalfoo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someobject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;someobject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Do stuff before calling function&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Call the function as it would have been called normally:&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;originalfoo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Run stuff after, here.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Tue, 12 May 2015 22:10:00 +0800</pubDate>
        <link>https://github.com/kkkkkxiaofei/jekyll/update/2015/05/12/js-call-apply.html</link>
        <guid isPermaLink="true">https://github.com/kkkkkxiaofei/jekyll/update/2015/05/12/js-call-apply.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve --watch&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://github.com/jekyll/jekyll-help&quot;&gt;Jekyll’s dedicated Help repository&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Fri, 01 May 2015 21:12:13 +0800</pubDate>
        <link>https://github.com/kkkkkxiaofei/jekyll/update/2015/05/01/welcome-to-jekyll2%20copy.html</link>
        <guid isPermaLink="true">https://github.com/kkkkkxiaofei/jekyll/update/2015/05/01/welcome-to-jekyll2%20copy.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve --watch&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://github.com/jekyll/jekyll-help&quot;&gt;Jekyll’s dedicated Help repository&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Fri, 01 May 2015 21:12:13 +0800</pubDate>
        <link>https://github.com/kkkkkxiaofei/jekyll/update/2015/05/01/welcome-to-jekyll2.html</link>
        <guid isPermaLink="true">https://github.com/kkkkkxiaofei/jekyll/update/2015/05/01/welcome-to-jekyll2.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
